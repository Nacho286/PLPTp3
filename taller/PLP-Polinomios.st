Object subclass: #Constante	instanceVariableNames: 'valor'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Polinomios'!!Constante methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 18:42'!evaluarCon: val	"comment stating purpose of message"	^ valor! !!Constante methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 18:50'!inicializarCon: val	"comment stating purpose of message"	valor:=val.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Constante class	instanceVariableNames: 'valor'!!Constante class methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 18:49'!conValor: val	"comment stating purpose of message"  	|unaInstancia|  	 unaInstancia := self new.    unaInstancia inicializarCon: val. 	 ^unaInstancia! !TestCase subclass: #PolinomiosTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Polinomios'!!PolinomiosTest methodsFor: 'as yet unclassified' stamp: 'pb 11/10/2014 19:14'!test05SePuedenCrearPolinomiosSumandoYMultiplicando	| sumando1 sumando2 polinomio |	sumando1 := Constante conValor: 1.	sumando2 := Variable new. 		polinomio := sumando1 + sumando2.		self assert: ((polinomio + polinomio) evaluarCon: 1) equals: 4.	self assert: ((polinomio * polinomio) evaluarCon: 2) equals: 9.! !!PolinomiosTest methodsFor: 'as yet unclassified' stamp: 'pb 11/10/2014 19:04'!test02AlEvaluarUnaVariableSeObtieneElValorQueSeLeEsteAsignando	| polinomio |		polinomio := Variable new. 		self assert: (polinomio evaluarCon: 3) equals: 3.! !!PolinomiosTest methodsFor: 'as yet unclassified' stamp: 'pb 11/10/2014 19:04'!test01AlEvaluarUnaConstanteSeObtieneElValorDeLaMisma	| polinomio |		polinomio := Constante conValor: 3. 		self assert: (polinomio evaluarCon: 123) equals: 3! !!PolinomiosTest methodsFor: 'as yet unclassified' stamp: 'pb 11/10/2014 19:06'!test04AlEvaluarUnProductoSeObtieneElValorDeLosPolinomiosEvaluadosMultiplicados	| sumando1 sumando2 polinomio  polinomio2 |		sumando1 := Constante conValor: 1.	sumando2 := Variable new. 		polinomio := Suma de: sumando1 con: sumando2.	polinomio2 := Producto de: polinomio con: polinomio.			self assert: (polinomio2 evaluarCon: 3) equals: 16.! !!PolinomiosTest methodsFor: 'as yet unclassified' stamp: 'pb 11/10/2014 19:06'!test03AlEvaluarUnaSumaSeObtieneElValorDeLaSumaDeLosSumandos	| sumando1 sumando2 polinomio |		sumando1 := Constante conValor: 1.	sumando2 := Variable new. 		polinomio := Suma de: sumando1 con: sumando2.			self assert: (polinomio evaluarCon: 3) equals: 4.! !Object subclass: #Producto	instanceVariableNames: 'variable constante'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Polinomios'!!Producto methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 19:18'!evaluarCon: val	"comment stating purpose of message"	^ (variable evaluarCon: val) * (constante evaluarCon: val)	! !!Producto methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 19:17'!inicializarCon:val Y:otroVal	"comment stating purpose of message"	variable :=val.	constante :=otroVal.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Producto class	instanceVariableNames: ''!!Producto class methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 19:12'!de: val con: otroVal	"comment stating purpose of message"	|unaInstancia|	unaInstancia := self new.	unaInstancia  inicializarCon: val Y:otroVal.	^unaInstancia! !Object subclass: #Suma	instanceVariableNames: 'variable constante'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Polinomios'!!Suma methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 19:11'!evaluarCon: val	"comment stating purpose of message"	^ (variable evaluarCon: val) + (constante evaluarCon: val)! !!Suma methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 19:08'!inicializarCon:val Y:otroVal	"comment stating purpose of message"	variable :=val.	constante :=otroVal.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Suma class	instanceVariableNames: ''!!Suma class methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 19:07'!de: val con: otroVal	"comment stating purpose of message"	|unaInstancia|	unaInstancia := self new.	unaInstancia  inicializarCon: val Y:otroVal.	^unaInstancia! !Object subclass: #Variable	instanceVariableNames: 'valor'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-Polinomios'!!Variable methodsFor: 'as yet unclassified' stamp: 'Ignacio 6/8/2017 18:53'!evaluarCon: val	"comment stating purpose of message"	^ val! !